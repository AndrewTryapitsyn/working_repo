
----------git--------------
--version control--

git config --list
git status

.gitignore 		- file what will be igrore for watching
git add 		what will be commited
git add . 		- add files in llocal directory(/dir1/) what will be commited
(it is good to separate filees to be commited for easy rollback)
git reset HEAD  	to remove files from stage status
git commit -m "message about update" 	without -m you have to edit file
git checkout --<file|. for all files> - to rollback to previous state
git diff 		- show changes from previous stage
git log		


---github---
--storage for git--
ssh-keygen -t rsa -b 4096 -C "pyneng.course@gmail.com"
eval  "$(ssh-agent -s)" chech if it is working
ssh-add  ~/.ssh/id_rsa  	-add key to dir
add key to github throught web
settings->ssh and GPG keys-> add new and copypast from file  ~/.ssh/id_rsa.pub
ssh -T git@github.com

cd
git clone git@github.com:.....git

git push origin master 	origin server's name master -branch
git pull			download changes from github
git diff HEAD..origin		to see changes befor pull

or create a new repository on the command line
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:AndrewTryapitsyn/test.git
git push -u origin master


…or push an existing repository from the command line
git remote add origin git@github.com:AndrewTryapitsyn/test.git
git push -u origin master


git pull  git@github.com:AndrewTryapitsyn/working_repo.git master

----------------------------------------------------------------
pip 
pip3

pip --version
python3 -m pip install	to be sure about version of pip and python


----------virtual environment-------
isolate projects, with different versions of packets, python versions

virtualenvwrapper  help to work with virtual environments
sudo pip install virtualenvwrapper
.bashrc
export WORKON_HOME-~/venv
. /usr/local/bin/virtualenvwrapper.sh

create a new virtual env with by default Python3.6
mkvirtualenv --python=/usr/loacl/bin/python3.6 pyneng

workon pyneng 	swithc to virtual environment
deactivate		logoff from virt env
rmvirtualenv Test


-----------------------
round(10/3, 3)  = 3.333 up to 3
round(10/3)       =3
3**4   =81
10%3 = 1  остаток

a+=5
a = '11'
int(a) = 11
bin_a = '101010100'
int(bin_a, 2) = 340
bin(255) = 0b1111111
hex(255) = 0xff

неизменямый тип
type('qwe')  == str
str(5) = '5'
line = 'don\'t'    \' 
line = "don't"
line ='''testtesttest
	stilltest'''
str1 = 'line1'
str2 = 'line2'
str1 + str2   == 'line1line2'
str1*2 = 'lin1line1
'#'*50  == '##############################'

str1[0] = 'l'
str[-1] = '1'
str[0:2] = 'li'
str[2:] = ne1
str[-3:0]
str[0:-1]
str3= '123456789'
str3[::2] = '13579'
str2[::-1] = '987654321'
line  = 'FastEthernet0/1FastEthernet0/1'
line.count('Fast') == 2
len(line) == 20
line.find('Ether') = 4
line.startswith('Fast') == True | endswith()
line.replase('0/1', '0/3')  == 'FastEthernet0/3FastEthernet0/3'
line.replase('0/1', '0/3',1)  == 'FastEthernet0/3FastEthernet0/1'
line.strip()|lstrip()|rstrip()
line.strip()
line = [80/110]
line.strip('[]') = 80/110
line = '1,3,4,5'
line.splite() = ['1','3','4','5']

tempate = '''
		IP address: {}
		Mask:		{}
		Interface	{}
		'''
template.format('10.1.1.1', 24, 'Gi0/0')

{:7} ширина 7 символов
{:b} преобразовать Int в двоичную
{:08b} добавить 0 до 8 символлов
{:<}
{:>}	выравнивание
temp2 = '''IP: {0}/{1}
		IP:		{0}
		Mask:	{1}
		'''
temp2.format(10.1.1.1', 24)	
temp2 = '''IP: {ip}/{mask}
		IP:		{ip}
		Mask:	{mask}
		'''	
temp2.format(ip = '10.1.1.1', mask = 24)


list
list1 = list('router')
list1 = [1,2,3]
генератор списка
list1 = ['FastEthernet0/' + str(i) for i in range(10)]
list1 = 'FastEthernet0/1'
		'FastEthernet0/2'
		'FastEthernet0/3'
		...
		'FastEthernet0/8'		
		'FastEthernet0/9'

list1 = [10,20,30]
list1[::-1] == 30,20,10 same rules as str
--------
list2=list1  link to the same object
list2[0] = 100
list1 == list2 ==100,20,30
--
list3 = list1.copy() create a copy
-------------
list1.append(40)
list1.extend([40,50])  
list1.insert(2,25)
list1.pop()		remove by default last index| or specifix index
list1.remove(20) remove by value
list1 = [5,2,1,4,3]
list1.sort()!! list1 == 1,2,3,4,5 !!!will sort list1 do not return result so if res = list1.sort(); res == null
sorted()      !!!use sorted instead
','.join(vlans)

---------------dict--------------
r1 = {'location':'IT'}
r1 = dict(location='IT', serial='aaaaa')
d_keys = ['hostname','location','vendor','model']
dict.fromkeys(d_keys) 			with None by default
dict.fromkeys(d_keys, False)	or with values, but do not create different values, rather link to the same value, for example link to the same list
d = {key:[] for key in d_keys}	same but create a separate object for each value


del r1['location']  delete key
r1.get('loac',10) return 10 if don't have key
r1.setdefault('location') return value if we have this key, if we don't have create new key and set value to None
r1.keys(),values().items() - special object , not regular list
l1 = r1.keys()			- link to r1.keys() and not a separate object
l2 = list(r1.keys())	- copy of keys

r.update(new_data)		- update old keys with new data, if key is not exist create a new



-------------tuple------
t = (1,)
-------set--------
set1 = set()
set1 = {1,2,3,4,5,6}
{item  ** 2 for item in [1,2,3,4]}


set1.add(2)
set1.discard(2)
vlans1&vlans2  == intersection
vlan1|vlans2   union
vlan1 - vlans2 difference



------------
add to file for executing python
python --version
python3.6 --version

#!/usr/bin/env python3
#!/usr/bin/env python3.6
chmod +x qwe.py


import sys
print(sys.argv)

test.py "gi 0/1"   -  'test.py' 'gi 0/1'
test.py 10 155 240

['access_template_argv.py','g0/0','10']
intf,vlan = args
interface,vlan = argv[1:]

vlan = input('input vlan')   # do not use for passwords

d= {1 : 'is equal to 1', 2 : 'is equal of 2', 3 : 'is equal of 3'}
print(d.get(int(input('input number')),' not equal to 1,2,3'))

if False:  == if None: == if 0:  == ()  == {}  == []  == ''  == len(list())!= 0
else: print('False')

l1= [1,2,3]
is_list = type(l1) == list
not_empty = len(l1) !=0 
if is_list and not_empty:


d = {1:10,2:20,3:30}
for key,value in d.items:
    print(key,value)


while true:

    if k == 1:
        contunue    jump to start while
    if k==2:
        break       end of while
    if k==4:
        pass        don't do nothing, just like temp if you don't know yet- vlans2 difference

-----------




%history   in ipython
pythontutol
pdb   - debuger
